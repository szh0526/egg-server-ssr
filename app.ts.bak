/**
 * 初始化
*/
import { Application, IBoot, Context } from 'egg';

export default class AppBoot implements IBoot {
  private readonly app: Application;
  private readonly ctx: Context;

  constructor(app: Application) {
    this.app = app;
    this.ctx = app.createAnonymousContext(); // 创建一个新的执行上下文
  }

  /**
   * 此时 config 文件已经被读取并合并，但是还并未生效， 这是应用层修改配置的最后时机
   * @memberof AppBoot
   */
  configWillLoad() {
    this.app.config.coreMiddleware.unshift('requestIdMiddleware');
    this.app.config.coreMiddleware.unshift('reportMiddleware');
    return;
  }

  /**
   * 所有的配置已经加载完毕
   * @memberof AppBoot
   */
  configDidLoad() {
    return;
  }

  /**
   * 所有的配置已经加载完毕，可以用来加载应用自定义的文件，启动自定义的服务
   * @memberof AppBoot
   */
  async didLoad() {
    return;
  }

  /**
   * 所有的插件都已启动完毕，但是应用整体还未 ready，可以做一些数据初始化等操作，这些操作成功才会启动应用
   * @memberof AppBoot
   */
  async willReady() {
    return;
  }

  /**
   * 应用已经启动完毕（worker 准备就绪）
   * @memberof AppBoot
   */
  async didReady() {
    const axios = this.ctx.axios;
    // 配置基础请求路径，后续请求地址可以采用相对路径；
    axios.defaults.baseURL = 'https://hacker-news.firebaseio.com/v0';
    // axios.defaults.headers.common['Authorization'] = '12345';
    axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';

    await this.app.runSchedule('loggerSchedule');
  }

  /**
   * 应用启动完成
   * @memberof AppBoot
   */
  async serverDidReady() {
    const start = Date.now();
    const app = this.app;
    const { cluster: { listen: { port } }, env, name } = app.config;
    const { title, versions: { node }, pid, execPath } = process;
    // const ctx = app.createAnonymousContext(); // 创建一个新的执行上下文
    
    // app.messenger.on('agent_start_action', data => {
    //   app.logger.info('agent进程是否已启动', data.success)
    // });

    // app.httpclient.on('request', request => {
    //   // 可以在这里设置一些 trace headers，方便全链路跟踪
    //   app.logger.info('request %j',request.url);
    // })
    // app.httpclient.on('response', response => {
    //   // 可以在这里设置一些 trace headers，方便全链路跟踪
    //   app.logger.info('response %j',response.res.timing);
    // })

    app.on('error', (err) => {
      app.logger.error(err);
    });

    // app.on('request', ctx => {
    //   // log receive request
    //   console.log('request');
    // }); 

    // app.on('response', ctx => {
    //   // ctx.starttime is set by framework
    //   const used = Date.now() - ctx.starttime;
    //   // log total cost
    //   console.log('used', used);
    // });

    // app.logger.info(app.config.httpclient);

    const { cryptico } = require('./lib/cryptico.js');

    const ctx = await this.app.createAnonymousContext();

    let publicKeyResult = await ctx.axios({
      url: `http://sit-appgw.cjdfintech.com/basic/aks/rsa/public/key`, 
      method: 'post',
      data: {
        "content":"get key"
      }
    });
    let publicKeyResultData = JSON.parse(publicKeyResult);
    let publicResultData = JSON.parse(publicKeyResultData.resultData);

    console.log("-------publicKeyResultData， 公钥只需要获取一次，app初始化的时候获取并保存，在service中实现 -------\r\n",publicResultData);

    class AksKeyManagerDemo {
      public keyHex;
      constructor() {
        //同一个Session的秘钥必须一样，否则解密服务端返回的数据会失败
        this.keyHex = null
      }
      setKeyHex(keyHex) {
        //业务方自行保存秘钥
        this.keyHex = keyHex
      }
      
      getKeyHex() {
        //返回保存的秘钥,返回null则会自动生成一个新的秘钥
        return this.keyHex
      }
    }
    const keyManager = new AksKeyManagerDemo()
    cryptico.setKeyManager(keyManager);


    // var publicKeyN = 'y2GBzqPApjKAREJcZDuQLMdmOKtyo9fDtE3klpbUylWhveiW25tGNln08exnQxdqTUfhnriK8xbKLD2B7+50d1QufIyOu09QljayRmnP8G9dt+cnfm5yu9yXHTDfTUoiOWbiunW1dBExa7JF+lQdMQZBxeYrL0+dlVv+e4zjCnU='
    // var shak = 'rmEjCT59Ku0Zf2uM9BmQXJYqac7pGMemBgNR+QdgN+4='
    // var text = '12345abd6,!@#中文$%^&*()7812345678';
    // var result = cryptico.encryptData(publicKeyN, shak, text);

    // if(result.status){
    //   var cihper =  result.cipher
    //   // 将cihper发送给服务器端解密 
    //   console.log(cihper)
    // }

    // 返回Json格式 {"shaKey":"密钥索引hash值", "pubKey":"公钥"}， pubKey -> publicKeyN , shaKey -> shak）
    var result = cryptico.encryptData(publicResultData.pubKey,publicResultData.shaKey,{
      a:1,
      b:2
    });

    console.log(result);

    if(result.status){
      var cihper =  result.cipher
      // 将cihper发送给服务器端解密
      console.log("-------cihper------\r\n",cihper)
      
      let ggg = await ctx.axios({
        url: `http://sit-appgw.cjdfintech.com/lbs/api/businessArea/list`, 
        method: 'post',
        data: {
          askWebData:cihper,
          shaKey:publicResultData.shaKey
        },
        withCredentials:true,
        headers:{
          'Cookie': 'ticket=633ab309-332c-4f5e-b068-3b5fd8ceb8a7;customerId=0066002000401351'
        },
      });
      
  
      console.log("-------lbs/api/businessArea/list----------\r\n",ggg);

    }

    app.logger.info(
      `\r\n-----------------「应用已启动」----------------------\r\n
        应用名称:${name}
        启动端口号:${port}
        node进程名称:${title}
        node版本:${node}
        node进程id:${pid}
        node进程执行路径:${execPath}
        环境变量:${env}
        启动耗时:${Date.now() - start}毫秒
      \r\n-----------------「应用已启动」----------------------`);
  }

  /**
   * 应用即将关闭
   * @memberof AppBoot
   */
  async beforeClose() {
    this.app.logger.warn('应用即将关闭');
  }
}
